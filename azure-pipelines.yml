trigger:
- main

pool:
  vmImage: 'windows-latest'

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '31f2836a-84b3-4ad0-bf15-f4ea41754d06'
  imageRepository: 'sportsdatavenu'
  containerRegistry: 'sportdeetscr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/src/SportsData.Venue/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Build Solution Vars
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  Major: '1'
  Minor: '0'
  Patch: '1'
  PackageVersion: '1.0.1'

  # Deploy Vars
  azureSubscription: 'dev-sports-data-connection'
  appName: 'dev-sdvenue'

stages:
- stage: BuildAndTest
  jobs:
  - job: BuildAndTest
    displayName: BuildAndTest
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: true

    - task: NuGetCommand@2
      displayName: 'NuGet Restore'
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'
        vstsFeed: '2bb0cd0d-fa6e-42f0-9b7e-9cc1ce065e55/de94ed5a-8390-4547-bdd9-f975a712aa70'
    
    - task: VSBuild@1
      displayName: 'Build sports-data-venue solution'
      inputs:
        solution: '**\*.sln'
        restoreNugetPackages: true
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: '**/*.csproj'
        testRunTitle: 'sdVenue-tests-unit'

- stage: BuildImagePushACR
  displayName: Build Image & Push to ACR
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
  - job: Deploy
    steps:
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: $(containerRegistry)/$(imageRepository):$(tag)